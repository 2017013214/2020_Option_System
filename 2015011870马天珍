//使用二元信号量解决无限缓冲区的生产者消费者问题
int count = 0;    //count为缓冲区中的数据项个数
BinSem s = 1, delay = 0;    //s为二元信号量，控制生产者和消费者进入临界区；
                            //delay为二元信号量，处理缓冲区为空的情况；
void producer(){
    while(1){
        produce();
        semWaitB(s);
        append();
        count++;
        if(count==1)semSignalB(delay);    //缓冲区非空，唤醒消费者进程
        semSignalB(s);
    }
}
 
void consumer(){
    semWaitB(delay);
    while(1){
        semWaitB(s);
        take();
        count--;
        m = count;
        semSignalB(s);
        consume();
        //用到m是因为此时在临界区外，在执行下面一条语句之前count可能已经被更新，导致delay不匹配
        if(m==0)semWaitB(delay);    //缓冲区已空，阻塞消费者进程
    }	
